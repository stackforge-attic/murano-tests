*** Settings ***
Library           String
Library           Boffin.WebUIlib    0    5    # Boffin framework library

*** Keywords ***
Log in WebUI by ${user}/${password}
    Fill Field    User Name    ${user}
    Fill Field    Password    ${password}
    Click on    Sign In
    Navigate to    Murano>Environments

User set value "${value}" for field ${field}
    Fill Field    ${field}    ${value}

Select "${action}" for chosen ${type} "${env}"
    ${xpath}=    Find Associated Element    ${env}    ${action}
    Click Element    ${xpath}
    Sleep    5

User click on "${element}"
    Click on    ${element}

Page should contain element "${element}"
    Page Should Contain    ${element}

Page should not contain element "${element}"
    Reload Page
    Page Should Not Contain    ${element}

User select "${item}" from dropdown list "${menu}"
    Select Item From List    ${menu}    ${item}

User confirms deletion
    Click On    Confirm deletion

Delete environment "${name}" after test
    Navigate To    Murano>Environments
    Select "More" for chosen environment "${name}"
    Select "Delete Environment" for chosen environment "${name}"
    User confirms deletion
    Page should not contain element "${name}"

Check the status of environment "${name}" (should be "${status}")
    Navigate to    Murano>Environments
    Wait Until Keyword Succeeds    40 min    5s    Check that Status of environment "${name}" is "${status}"

User create Active Directory with domain name "${name}"
    User select "Active Directory" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Domain Name
    User set value "P@ssw0rd" for field Administrator password
    User set value "P@ssw0rd" for field Confirm password
    User set value "P@ssw0rd" for field Recovery password
    User set value "P@ssw0rd" for field Confirm recovery password
    User set value "${name}" for field Hostname template
    User click on "Next"
    User select "Windows Server 2012 Standard" from dropdown list "Instance image"
    User click on "Create"
    Sleep    5s

Check that deploy "${env}" finished
    Navigate To    Murano>Environments
    Select "More" for chosen environment "${env}"
    Select "Show Deployments" for chosen environment "${env}"
    Reload Page
    ${text}=    Get Text    xpath=/html/body/div/div[2]/div[3]/form/table/tbody/tr/td[3]
    Should Be Equal As Strings    ${text}    Successful
    Run Keyword If    '${text}'== 'Failed'    Take a screenshot of the failed deploy

Check that ${subject} of ${element} "${name}" is "${status}"
    Sleep    10
    ${row}=    Get Table Row With    ${name}
    ${source}=    Get Source
    ${cell}=    Get Web Element Selector    ${subject}    ${source}    th    this
    ${#_of_column}=    Get Substring    ${cell}    -2    -1
    ${text}=    Get Text    xpath=${row}/td[${#_of_column}]
    Should Contain    ${text}    ${status}

Take a screenshot of the failed deploy
    User click on "Show Details"
    User click on "Logs"
    Capture Page Screenshot

User create IIS with name "${name}" ${join} "${domain}"
    User select "Internet Information Services" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Service Name
    User set value "P@ssw0rd" for field Administrator password
    User set value "P@ssw0rd" for field Confirm password
    User select "${domain}" from dropdown list "Domain"
    User set value "iis" for field Hostname template
    User click on "Next"
    User select "Windows Server 2012 Standard" from dropdown list "Instance image"
    User click on "Create"
    Page Should Contain    ${name}

User create ASP.NET App with name "${name}" ${join} "${domain}"
    User select "ASP.NET Application" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Service Name
    User set value "P@ssw0rd" for field Administrator password
    User set value "P@ssw0rd" for field Confirm password
    User select "${domain}" from dropdown list "Domain"
    User set value "git://github.com/Mirantis/murano-mvc-demo.git" for field Git repository
    User set value "asp" for field Hostname template
    User click on "Next"
    User select "Windows Server 2012 Standard" from dropdown list "Instance image"
    User click on "Create"
    Page should contain element "${name}"

User create IIS Farm with name "${name}" ${join} "${domain}"
    User select "Internet Information Services Web Farm" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Service Name
    User set value "P@ssw0rd" for field Administrator password
    User set value "P@ssw0rd" for field Confirm password
    Set IP address from the subnet where Load Balancer VIP is running
    User select "${domain}" from dropdown list "Domain"
    User set value "iisfarm#" for field Hostname template
    User click on "Next"
    User select "Windows Server 2012 Standard" from dropdown list "Instance image"
    User click on "Create"
    Page should contain element "${name}"

User create ASP.NET Farm with name "${name}" ${join} "${domain}"
    User select "ASP.NET Application Web Farm" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Service Name
    User set value "P@ssw0rd" for field Administrator password
    User set value "P@ssw0rd" for field Confirm password
    User select "${domain}" from dropdown list "Domain"
    User set value "git://github.com/Mirantis/murano-mvc-demo.git" for field Git repository
    Set IP address from the subnet where Load Balancer VIP is running
    User set value "aspfarm#" for field Hostname template
    User click on "Next"
    User select "Windows Server 2012 Standard" from dropdown list "Instance image"
    User click on "Create"
    Page should contain element "${name}"

User create MS SQL server with name "${name}" ${join} "${domain}"
    User select "MS SQL Server" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Service Name
    User set value "P@ssw0rd" for field Administrator password
    User set value "P@ssw0rd" for field Confirm password
    User select "${domain}" from dropdown list "Domain"
    User set value "P@ssw0rd" for field SA Password
    User set value "P@ssw0rd" for field Confirm SA password SQL
    User set value "sql" for field Hostname template
    User click on "Next"
    User select "Windows Server 2012 Standard" from dropdown list "Instance image"
    User click on "Create"
    Page should contain element "${name}"

User create MS SQL cluster with name "${name}" ${join} "${domain}"
    User create Active Directory with domain name "${domain}"
    Page should contain element "${domain}"
    User click on "Create Service"
    User select "MS SQL Server Cluster" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Service Name
    User set value "P@ssw0rd" for field Administrator password
    User set value "P@ssw0rd" for field Confirm password
    User select "${domain}" from dropdown list "Domain"
    User set value "P@ssw0rd" for field SA Password
    User set value "P@ssw0rd" for field Confirm SA password
    User click on "Next"
    Set IP address from the subnet where Cluster Static IP is running
    User set value "cluster" for field Cluster Name
    User set value "AG_name" for field Availability Group Name
    User set value "AG_listener_name" for field Availability Group Listener Name
    Set IP address from the subnet where Availability Group Listener IP is running
    User set value "user" for field SQL User Name
    User set value "P@ssw0rd" for field SQL User Password
    User set value "P@ssw0rd" for field Confirm password
    User set value "sqlcluster#" for field Hostname template
    User click on "Next"
    User set value "testbase" for field Database list
    User click on "Next"
    User select "Windows Server 2012 Standard" from dropdown list "Instance image"
    User click on "Create"
    Page should contain element "${name}"

User create Telnet with name "${name}"
    User select "Linux Telnet" from dropdown list "Service Type"
    User click on "Next"
    User set value "${name}" for field Service Name
    User select "murano-lb-key" from dropdown list "Key Pair"
    User set value "telnet" for field Hostname
    User click on "Next"
    User select "Linux Image" from dropdown list "Instance image"
    User click on "Create"
    Wait For Page Loaded

Check that service "${service}" was joined in domain "${domain}"
    User click on "${service}"
    Page should contain element "${domain}"

Choose ${name} (set checkbox on in the ${num} column)
    ${row}=    Get Table Row With    ${name}
    Click Element    xpath=${row}/td[${num}]/input

Compose a new service "${name}"
    User click on "Compose Service"
    User set value "${name}" for field Service_Name
    User set value "newService" for field Fully Qualified Service Name
    User set value "WebTestUser" for field Author
    User set value "<strong> New Test Service </strong> Here is a new description" for field Description
    User click on "UI Files"
    Choose Demo.yaml (set checkbox on in the 3 column)
    User click on "Workflows"
    Choose Demo.xml (set checkbox on in the 3 column)
    User click on "Heat Templates"
    Choose Demo.template (set checkbox on in the 3 column)
    User click on "Scripts"
    Choose CopyPrerequisites.ps1 (set checkbox on in the 3 column)
    User click on "Submit"
    Page should contain element "${name}"

Choose and download file "${file_name}" to repository
    Click Element    xpath=.//*[@id='id_file']
    Choose File    id_file    ${files_path}${file_name}
    Sleep    5s
    User click on "Upload"
    Sleep    5s

Set IP address from the subnet where ${component} is running
    User set value "1.1.1.1" for field ${component}
    User click on "Next"
    Page should contain    Specified IP address should belong to
    ${xpath}    Find Associated Element    ${component}    Specified IP address should belong to
    ${string}=    Get Text    ${xpath}
    @{words}    Split String    ${string}    ${SPACE}
    @{IP}    Split String    @{words}[6]    .
    ${last_byte}=    Generate Random String    2    [NUMBERS]
    User set value "@{IP}[0].@{IP}[1].@{IP}[2].${last_byte}" for field ${component}

Set Checkbox "${name}"
    ${checkbox}    Wait For Element Found    ${name}    input    previous
    Click Element    ${checkbox}
    Sleep    2s
